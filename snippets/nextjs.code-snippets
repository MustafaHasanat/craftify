{
  "Next.js Server Page": {
    "prefix": "nxtsp",
    "body": [
      "import { getAppMetadata } from '@/constants';",
      "import { Lang } from '@/types';",
      "import { getDictionary } from '@/utils';",
      "",
      "interface ${1:Page}Props {",
      "  params: Promise<{ lang: Lang }>;",
      "}",
      "",
      "export async function generateMetadata({ params }: ${1:Page}Props) {",
      "  const { lang } = await params;",
      "  const locale = getDictionary(lang);",
      "",
      "  return {",
      "    ...getAppMetadata(lang, locale),",
      "  };",
      "}",
      "",
      "export default async function Page({ params }: ${1:Page}Props) {",
      "  const { lang } = await params;",
      "  const locale = getDictionary(lang);",
      "",
      "  return <section></section>;",
      "}",
      ""
    ],
    "description": "Insert a Next.js server page with the essentials"
  },
  "Next.js Server Layout": {
    "prefix": "nxtsl",
    "body": [
      "import { i18n } from '@/configs';",
      "import { Lang } from '@/types';",
      "import { getDictionary } from '@/utils';",
      "import { globalFont } from '@app/assets';",
      "import { cn } from '@heroui/react';",
      "import { getAppMetadata } from '@/constants';",
      "import { ReactNode } from 'react';",
      "import '@app/_assets/css/globals.css';",
      "",
      "interface ${1:Layout}Props {",
      "  children: ReactNode;",
      "  params: Promise<{ lang: Lang }>;",
      "}",
      "",
      "export async function generateMetadata({ params }: ${1:Layout}Props) {",
      "  const { lang } = await params;",
      "  const locale = getDictionary(lang);",
      "",
      "  return {",
      "    ...getAppMetadata(lang, locale),",
      "    title: locale.meta.title,",
      "    description: locale.meta.description,",
      "  };",
      "}",
      "",
      "export async function generateStaticParams() {",
      "  return i18n.locales.map((lang) => ({ lang }));",
      "}",
      "",
      "export default async function ${1:Layout}({ children, params }: ${1:Layout}Props) {",
      "  const { lang } = await params;",
      "",
      "  return (",
      "    <div",
      "      lang={lang}",
      "      dir={lang === 'ar' ? 'rtl' : 'ltr'}",
      "      className={cn(globalFont.className, `w-full flex h-fit flex-col`)}",
      "    >",
      "      <Header lang={lang} />",
      "",
      "      <main className='flex w-full flex-col'>{children}</main>",
      "",
      "      <Footer lang={lang} />",
      "    </div>",
      "  );",
      "}",
      ""
    ],
    "description": "Insert a Next.js server layout with the essentials"
  }
}
