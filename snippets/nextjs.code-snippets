{
  "Server Page": {
    "prefix": "csp",
    "body": [
      "import { getAppMetadata } from '@/constants';",
      "import { Lang } from '@/types';",
      "import { getDictionary } from '@/utils';",
      "",
      "export const dynamic = 'force-dynamic';",
      "",
      "interface ${1:Page}Props {",
      "  params: Promise<{ lang: Lang }>;",
      "}",
      "",
      "export async function generateMetadata({ params }: ${1:Page}Props) {",
      "  const { lang } = await params;",
      "  const locale = getDictionary(lang);",
      "",
      "  return {",
      "    ...getAppMetadata(lang, locale),",
      "  };",
      "}",
      "",
      "export default async function Page({ params }: ${1:Page}Props) {",
      "  const { lang } = await params;",
      "  const locale = getDictionary(lang);",
      "",
      "  return <section></section>;",
      "}",
      ""
    ],
    "description": "Insert a Next.js server page with the essentials"
  },
  "Server Layout": {
    "prefix": "csl",
    "body": [
      "import { i18n } from '@/configs';",
      "import { Lang } from '@/types';",
      "import { getDictionary } from '@/utils';",
      "import { globalFont } from '@app/assets';",
      "import { cn } from '@heroui/react';",
      "import { getAppMetadata } from '@/constants';",
      "import { ReactNode } from 'react';",
      "import '@app/_assets/css/globals.css';",
      "",
      "interface ${1:Layout}Props {",
      "  children: ReactNode;",
      "  params: Promise<{ lang: Lang }>;",
      "}",
      "",
      "export async function generateMetadata({ params }: ${1:Layout}Props) {",
      "  const { lang } = await params;",
      "  const locale = getDictionary(lang);",
      "",
      "  return {",
      "    ...getAppMetadata(lang, locale),",
      "    title: locale.meta.title,",
      "    description: locale.meta.description,",
      "  };",
      "}",
      "",
      "export async function generateStaticParams() {",
      "  return i18n.locales.map((lang) => ({ lang }));",
      "}",
      "",
      "export default async function ${1:Layout}({ children, params }: ${1:Layout}Props) {",
      "  const { lang } = await params;",
      "",
      "  return (",
      "    <div",
      "      lang={lang}",
      "      dir={lang === 'ar' ? 'rtl' : 'ltr'}",
      "      className={cn(globalFont.className, `w-full flex h-fit flex-col`)}",
      "    >",
      "      <Header lang={lang} />",
      "",
      "      <main className='flex w-full flex-col'>{children}</main>",
      "",
      "      <Footer lang={lang} />",
      "    </div>",
      "  );",
      "}",
      ""
    ],
    "description": "Insert a Next.js server layout with the essentials"
  },
  "Client Page": {
    "prefix": "ccp",
    "body": [
      "'use client';",
      "",
      "import { useLocale } from '@/hooks';",
      "",
      "type ${1:Name}PageProps = {};",
      "",
      "export function ${1:Name}Page({}: ${1:Name}PageProps) {",
      "  const { locale } = useLocale();",
      "",
      "  return <section></section>;",
      "}",
      ""
    ],
    "description": "Insert a client side page"
  },
  "Get-One Action": {
    "prefix": "cgoa",
    "body": [
      "'use server';",
      "",
      "import { prisma } from '@/configs';",
      "import { ${2:PascalName} } from '@/models';",
      "import { CustomResponse, Dictionary } from '@/types';",
      "import { getObjectsWithPresignedImagesUrls } from '@/utils';",
      "",
      "type Get${2:PascalName}sActionProps = {",
      "  locale: Dictionary;",
      "  ${1:CamelName}Id: string;",
      "  withTable?: boolean;",
      "};",
      "",
      "export async function get${2:PascalName}DetailsAction({",
      "  locale,",
      "  ${1:CamelName}Id,",
      "  withCollection = false,",
      "}: Get${2:PascalName}sActionProps): Promise<CustomResponse<${2:PascalName}>> {",
      "  try {",
      "    const ${1:CamelName} = await prisma.${1:CamelName}.findUnique({",
      "      where: {",
      "        id: ${1:CamelName}Id,",
      "      },",
      "      include: {",
      "        ...(withTable",
      "          ? {",
      "              table: {",
      "                select: {",
      "                  id: true,",
      "                },",
      "              },",
      "            }",
      "          : {}),",
      "      },",
      "    });",
      "",
      "    const ${1:CamelName}WithPresignedImages =",
      "      await getObjectsWithPresignedImagesUrls<${2:PascalName}>({",
      "        imagesKeys: ['image'],",
      "        objects: [${1:CamelName}] as unknown as ${2:PascalName}[],",
      "      });",
      "",
      "    return {",
      "      payload: ${1:CamelName}WithPresignedImages[0],",
      "      message: locale.toasts.processCompletedSuccessfully,",
      "      status: 200,",
      "    };",
      "  } catch (error) {",
      "    console.error(error);",
      "    return {",
      "      payload: null,",
      "      message: locale.toasts.unexpectedError,",
      "      status: 500,",
      "    };",
      "  }",
      "}",
      ""
    ],
    "description": "Server side getter action to get a single record details"
  },
  "Get-Paginated Action": {
    "prefix": "cgpa",
    "body": [
      "'use server';",
      "",
      "import { prisma } from '@/configs';",
      "import { ${2:PascalName} } from '@/models';",
      "import { CustomPaginatedResponse, Dictionary, PaginationParams } from '@/types';",
      "import {",
      "  getObjectsWithPresignedImagesUrls,",
      "  getPaginationDetails,",
      "} from '@/utils';",
      "import { PageSizes } from '@enums';",
      "",
      "type Get${2:PascalName}sActionProps = PaginationParams & {",
      "  locale: Dictionary;",
      "};",
      "",
      "export async function get${2:PascalName}sAction({",
      "  pageSize = PageSizes.${1:CamelName}s,",
      "  page = 1,",
      "  locale,",
      "}: Get${2:PascalName}sActionProps): Promise<CustomPaginatedResponse<${2:PascalName}>> {",
      "  try {",
      "    const total${2:PascalName}s = await prisma.${1:CamelName}.count({",
      "      where: {",
      "        // TODO: type the query",
      "      },",
      "    });",
      "",
      "    const ${1:CamelName}s = await prisma.${1:CamelName}.findMany({",
      "      where: {",
      "        // TODO: type the query",
      "      },",
      "      skip: (page - 1) * pageSize,",
      "      take: pageSize,",
      "    });",
      "",
      "    const { nextPage, pagesCount, prevPage } = getPaginationDetails({",
      "      page,",
      "      pageSize,",
      "      totalRecords: total${2:PascalName}s,",
      "    });",
      "",
      "    const ${1:CamelName}sWithPresignedImages =",
      "      await getObjectsWithPresignedImagesUrls<${2:PascalName}>({",
      "        imagesKeys: ['image'],",
      "        objects: ${1:CamelName}s as ${2:PascalName}[],",
      "      });",
      "",
      "    return {",
      "      payload: ${1:CamelName}sWithPresignedImages,",
      "      message: locale.toasts.processCompletedSuccessfully,",
      "      status: 200,",
      "      count: total${2:PascalName}s,",
      "      next: nextPage,",
      "      previous: prevPage,",
      "      pagesCount,",
      "    };",
      "  } catch (error) {",
      "    console.error(error);",
      "    return {",
      "      payload: [],",
      "      message: locale.toasts.unexpectedError,",
      "      status: 500,",
      "      count: 0,",
      "      next: 0,",
      "      previous: 0,",
      "      pagesCount: 0,",
      "    };",
      "  }",
      "}",
      ""
    ],
    "description": "Server side getter action to get paginated records"
  },
  "Full Paginated Listings": {
    "prefix": "cfpl",
    "body": [
      "  const { data, isRefetching, isLoading, isFetching, Pagination } =",
      "    usePaginatedData<PaginationParams, CustomPaginatedResponse<${1:PascalName}>>({",
      "      useGetterFn: useGet${1:PascalName}s,",
      "      params: { pageSize: PageSizes.${2:CamelName}s },",
      "      pageSize: PageSizes.${2:CamelName}s,",
      "    });",
      "",
      "  const loadingState =",
      "    isLoading || isRefetching || isFetching ? 'loading' : 'idle';",
      "",
      "  const loadingIsActive = loadingState === 'loading'",
      "",
      "  return (",
      "    <section className='flex flex-col justify-center gap-3'>",
      "      <div className='grid gap-5 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-5'>",
      "        {loadingIsActive",
      "          ? Array.from({ length: PageSizes.${2:CamelName}s })",
      "              .fill(0)",
      "              .map((_, index) => (",
      "                <Skeleton",
      "                  key={'skeleton' + index}",
      "                  className='h-32 w-full rounded-lg'",
      "                />",
      "              ))",
      "          : data?.payload?.map((${2:CamelName}) => (",
      "              <${1:PascalName}Card key={${2:CamelName}?.id} ${2:CamelName}={${2:CamelName}} />",
      "            ))}",
      "      </div>",
      "",
      "      <Pagination />",
      "    </section>",
      "  );"
    ],
    "description": "Insert the pagination getter and listings map"
  },
  "New Database Model": {
    "prefix": "cndm",
    "body": [
      "import { User } from './users';",
      "",
      "export type ${1:PascalName} = {",
      "  id: string;",
      "  // record details",
      "  // time-based data",
      "  createdAt: Date;",
      "  updatedAt: Date;",
      "  // relations",
      "};",
      "",
      "export type Create${1:PascalName} = Omit<${1:PascalName}, 'id' | 'createdAt' | 'updatedAt'>;",
      "",
      "export type Update${1:PascalName} = Omit<",
      "  Partial<${1:PascalName}>,",
      "  'id' | 'createdAt' | 'updatedAt'",
      ">;",
      ""
    ],
    "description": "Insert the model type boilerplate for a database table"
  },
  "Page Container": {
    "prefix": "cpc",
    "body": [
      "<div className='w-full flex flex-col gap-5 px-5 py-20'>",
      "  <section className='container mx-auto flex w-full flex-col gap-5'>",
      "    <h1 className='text-center text-3xl font-bold lg:text-start'>{locale}</h1>",
      "    <h2 className='text-center text-lg lg:text-start'>{locale}</h2>",
      "  </section>",
      "</div>",
      ""
    ],
    "description": "Insert a page container structure"
  },
  "Heading Container": {
    "prefix": "chc",
    "body": [
      "<h1 className='text-center text-3xl font-bold lg:text-start'>{locale}</h1>"
    ],
    "description": "Insert a heading to the page"
  },
  "Sub Heading Container": {
    "prefix": "cshc",
    "body": [
      "<h2 className='text-center text-lg lg:text-start'>{locale}</h2>",
      ""
    ],
    "description": "Insert a sub-heading to the page"
  },
  "Image Component": {
    "prefix": "cimg",
    "body": [
      "<Image",
      "    src={''}",
      "    alt=''",
      "    priority",
      "    width={500}",
      "    height={500}",
      "/>"
    ],
    "description": "Insert a Next.js image component"
  }
}
