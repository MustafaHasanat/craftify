{
  "TanStack Get-One": {
    "prefix": "c-tsgo",
    "body": [
      "'use client';",
      "",
      "import { useLocale } from '@/hooks';",
      "import { ${1:PascalName} } from '@/models';",
      "import { CustomResponse } from '@/types';",
      "import { useQuery } from '@tanstack/react-query';",
      "import { useParams } from 'next/navigation';",
      "",
      "export const useGet${1:PascalName}Details = ({",
      "  ${2:CamelName}Id,",
      "}: {",
      "  ${2:CamelName}Id?: string;",
      "}) => {",
      "  const { id } = useParams();",
      "  const { locale } = useLocale();",
      "",
      "  return useQuery<CustomResponse<${1:PascalName}>>({",
      "    queryKey: ['Get${1:PascalName}Details'],",
      "    queryFn: async () => {",
      "      const ${2:CamelName} = await get${1:PascalName}DetailsAction({",
      "        ${2:CamelName}Id: ${2:CamelName}Id || (id as string),",
      "        locale,",
      "      });",
      "",
      "      return ${2:CamelName};",
      "    },",
      "  });",
      "};"
    ],
    "description": "Insert a TanStack hook to get a record details"
  },
  "TanStack Get-Paginated": {
    "prefix": "c-tsgp",
    "body": [
      "'use client';",
      "",
      "import { useLocale } from '@/hooks';",
      "import { ${1:PascalName} } from '@/models';",
      "import { CustomPaginatedResponse, PaginationParams } from '@/types';",
      "import { useQuery } from '@tanstack/react-query';",
      "import { PageSizes } from '@enums';",
      "",
      "export const useGet${1:PascalName}s = ({",
      "  pageSize = PageSizes.${1:PascalName}s,",
      "  page = 1,",
      "}: PaginationParams) => {",
      "  const { locale } = useLocale();",
      "",
      "  return useQuery<CustomPaginatedResponse<${1:PascalName}>>({",
      "    queryKey: ['Get${1:PascalName}s', pageSize, page],",
      "    queryFn: async () => {",
      "      const ${2:CamelName}s = await get${1:PascalName}sAction({",
      "        page,",
      "        pageSize,",
      "        locale,",
      "      });",
      "",
      "      return ${2:CamelName}s;",
      "    },",
      "  });",
      "};",
      ""
    ],
    "description": "Insert a TanStack hook to get a paginated response of records"
  },
  "TanStack Create": {
    "prefix": "c-tsc",
    "body": [
      "'use client';",
      "",
      "import { useLocale } from '@/hooks';",
      "import { Create${1:PascalName} } from '@/models';",
      "import { useMutation } from '@tanstack/react-query';",
      "",
      "export const useCreate${1:PascalName} = () => {",
      "  const { locale } = useLocale();",
      "",
      "  return useMutation({",
      "    mutationFn: async ({",
      "      ${2:CamelName},",
      "    }: {",
      "      ${2:CamelName}: Create${1:PascalName};",
      "    }) => {",
      "      return await create${1:PascalName}Action({",
      "        ${2:CamelName},",
      "        locale,",
      "      });",
      "    },",
      "  });",
      "};",
      ""
    ],
    "description": "Insert a TanStack hook to create a new record"
  },
  "TanStack Update": {
    "prefix": "c-tsu",
    "body": [
      "'use client';",
      "",
      "import { useLocale } from '@/hooks';",
      "import { Update${1:PascalName} } from '@/models';",
      "import { useMutation } from '@tanstack/react-query';",
      "",
      "export const useUpdate${1:PascalName} = () => {",
      "  const { locale } = useLocale();",
      "",
      "  return useMutation({",
      "    mutationFn: async ({",
      "      data,",
      "      ${2:CamelName}Id,",
      "    }: {",
      "      data: ${1:PascalName}Schema;",
      "      ${2:CamelName}Id?: string;",
      "    }) => {",
      "      return await update${1:PascalName}Action({",
      "        data: data as Update${1:PascalName},",
      "        locale,",
      "      });",
      "    },",
      "  });",
      "};",
      ""
    ],
    "description": "Insert a TanStack hook to update a record"
  },
  "TanStack Delete": {
    "prefix": "c-tsd",
    "body": [
      "'use client';",
      "",
      "import { useLocale } from '@/hooks';",
      "import { useMutation } from '@tanstack/react-query';",
      "",
      "export const useDelete${1:PascalName} = () => {",
      "  const { locale } = useLocale();",
      "",
      "  return useMutation({",
      "    mutationFn: async ({ ${2:CamelName}Id }: { ${2:CamelName}Id: string }) =>",
      "      await delete${1:PascalName}Action({",
      "        ${2:CamelName}Id,",
      "        locale,",
      "      }),",
      "  });",
      "};",
      ""
    ],
    "description": "Insert a TanStack hook to delete a record"
  }
}
