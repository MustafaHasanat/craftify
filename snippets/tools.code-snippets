{
  "Prisma Configuration Setup": {
    "prefix": "cpcs",
    "body": [
      "//? ------------- Database Configurations -------------",
      "",
      "generator client {",
      "  provider = 'prisma-client-js'",
      "}",
      "",
      "datasource db {",
      "  provider = 'postgresql'",
      "  url      = env('DATABASE_URL')",
      "}",
      ""
    ],
    "description": "Insert the configuration needed to initialize Prisma"
  },
  "Prisma New Table": {
    "prefix": "cpnt",
    "body": [
      "//? ------------- ${1:Name} Table -------------",
      "// stores the ${1:Name} record data",
      "",
      "model ${1:Name} {",
      "  id              String           @id @default(uuid())",
      "  // ${1:Name} details",
      "",
      "  // time-based data",
      "  createdAt       DateTime         @default(now())",
      "  updatedAt       DateTime         @default(now())",
      "  // relational fields",
      "}"
    ],
    "description": "Insert the essentials for defining a new table in Prisma schema"
  },
  "Prisma One-To-One": {
    "prefix": "cpoto",
    "body": [
      "// for the first table",
      "${1:Table1}    ${1:Table1}?",
      "// for the second table",
      "${2:Table2}   ${2:Table2}  @relation(fields: [${2:Table2}Id], references: [id])",
      "${2:Table2}Id String   @unique"
    ],
    "description": "Insert a one-to-one handlers to create the relation in Prisma tables"
  },
  "Prisma One-To-Many": {
    "prefix": "cpotm",
    "body": [
      "  // for the (many) table ",
      "  ${1:TableNameSrc}       ${1:TableNameSrc}        @relation(fields: [${1:TableNameSrc}Id], references: [id], onDelete: Cascade)",
      "  ${1:TableNameSrc}Id     String",
      "  ",
      "  // for the (one) table",
      "  ${2:TableNameDest}s     ${2:TableNameDest}[]",
      ""
    ],
    "description": "Insert a one-to-many handlers to create the relation in Prisma table"
  },
  "Prisma Many-To-Many": {
    "prefix": "cpmtm",
    "body": [
      "//? ------------- ${1:Table1}${2:Table2} Table -------------",
      "// stores the ${1:Table1}${2:Table2} record data",
      "model ${1:Table1}${2:Table2} {",
      "  // time-based data",
      "  createdAt       DateTime   @default(now())",
      "  updatedAt       DateTime   @default(now())",
      "  // many-to-one IDs",
      "  ${1:Table1}Id   String",
      "  ${2:Table2}Id   String",
      "  // many-to-one objects",
      "  ${1:Table1}   ${1:Table1} @relation(fields: [${1:Table1}Id], references: [id], onDelete: Cascade)",
      "  ${2:Table2}   ${2:Table2} @relation(fields: [${2:Table2}Id], references: [id], onDelete: Cascade)",
      "",
      "  @@id([${1:Table1}Id, ${2:Table2}Id]) // Composite primary key: This prevents duplicate rows with the same (${1:Table1}Id, ${2:Table2}Id) pair at the database level.",
      "}",
      "",
      "// add this to each table",
      "${1:Table1}${2:Table2}s ${1:Table1}${2:Table2}[]",
      ""
    ],
    "description": "Insert a many-to-many handlers to create the relation in Prisma tables"
  },
  "Zustand New Store": {
    "prefix": "czns",
    "body": [
      "import { create } from 'zustand';",
      "import { createJSONStorage, persist } from 'zustand/middleware';",
      "",
      "export interface ${1:PascalName}StoreState {",
      "  ${2:CamelName}: boolean;",
      "  isHydrated: boolean;",
      "  set${1:PascalName}: (${2:CamelName}: boolean) => void;",
      "  setIsHydrated: (value: boolean) => void;",
      "}",
      "",
      "const getInitialState = (set: {",
      "  (",
      "    state: ${1:PascalName}StoreState | ((state: ${1:PascalName}StoreState) => ${1:PascalName}StoreState)",
      "  ): void;",
      "}): ${1:PascalName}StoreState => ({",
      "  ${2:CamelName}: false,",
      "  isHydrated: false,",
      "  set${1:PascalName}: (${2:CamelName}) => {",
      "    set((state) => ({",
      "      ...state,",
      "      ${2:CamelName},",
      "    }));",
      "  },",
      "  setIsHydrated: (isHydrated) => {",
      "    set((state) => ({ ...state, isHydrated }));",
      "  },",
      "});",
      "",
      "export const use${1:PascalName}Store = create<${1:PascalName}StoreState>()(",
      "  persist((set) => getInitialState(set), {",
      "    name: '${2:CamelName}-storage',",
      "    storage: createJSONStorage(() => localStorage),",
      "    onRehydrateStorage: () => (state) => {",
      "      if (state) {",
      "        state.setIsHydrated(true); // This will be called when the persisted state is hydrated",
      "      }",
      "    },",
      "  })",
      ");",
      ""
    ],
    "description": "Insert a Zustand store boilerplate "
  },
  "Button-Iconify Component": {
    "prefix": "cbicn",
    "body": [
      "<Button",
      "  color='primary'",
      "  isIconOnly={false}",
      "  startContent={",
      "    <Icon",
      "      icon={Icons.${1:ICON}}",
      "      className='pointer-events-none size-5'",
      "    />",
      "  }",
      ">",
      "  <p className=''>{locale}</p>",
      "</Button>"
    ],
    "description": "Insert a button with an Iconify starting component"
  },
  "Iconify Component": {
    "prefix": "cicn",
    "body": ["<Icon icon={Icons.${1:ICON}} className='size-5' />"],
    "description": "Insert an Iconify starting component"
  }
}
